<script setup lang="ts">
import DeviceSelector from "./DeviceSelector.vue";
import DevicePreview from "./DevicePreview.vue";
import InfoPanel from "./InfoPanel.vue";

type DeviceType = "desktop" | "tablet" | "mobile";

const activeDevice = ref<DeviceType>("desktop");
const zoomLevel = ref<number>(90);
const scrollContainer = ref<HTMLElement | null>(null);

// Simulado del tamaño base de los dispositivos
const getBaseWidth = (device: DeviceType): number => {
  switch (device) {
    case "desktop":
      return 1280;
    case "tablet":
      return 768;
    case "mobile":
      return 390;
    default:
      return 1280;
  }
};

// Handle zoom in/out 10
const handleZoomIn = () => {
  zoomLevel.value = Math.min(zoomLevel.value + 10, 150);
  nextTick(() => centerContent());
};

const handleZoomOut = () => {
  zoomLevel.value = Math.max(zoomLevel.value - 10, 30);
  nextTick(() => centerContent());
};

// Función para centrar el contenido cuando cambia el zoom
const centerContent = () => {
  if (!scrollContainer.value) return;

  // Calculamos las dimensiones del contenedor y del contenido
  const containerWidth = scrollContainer.value.clientWidth;
  const containerHeight = scrollContainer.value.clientHeight;
  const contentWidth =
    getBaseWidth(activeDevice.value) * (zoomLevel.value / 100);
  const contentHeight = contentWidth * 0.75; // Asumiendo una proporción aproximada

  // Centramos el scroll
  scrollContainer.value.scrollLeft =
    (scrollContainer.value.scrollWidth - containerWidth) / 2;
  scrollContainer.value.scrollTop =
    (scrollContainer.value.scrollHeight - containerHeight) / 2;
};

// Observer para el cambio de zoom y centrar el contenido
watch(zoomLevel, () => {
  nextTick(() => centerContent());
});

// Centramos el contenido al cargar
onMounted(() => {
  nextTick(() => centerContent());
});
</script>

<template>
  <div class="bg-white h-full flex flex-col relative">
    <div class="flex flex-col p-4 absolute w-full z-10">
      <div class="flex items-center justify-between mb-3">
        <!--      <div class="flex items-center space-x-2">
          <UButton
            variant="outline"
            icon="lucide:minus"
            class="inline-flex items-center px-2 py-2 text-sm font-medium border rounded-md"
            @click="handleZoomOut"
          ></UButton>
          <span class="text-sm font-medium w-12 text-center"
            >{{ zoomLevel }}%</span
          >
          <UButton
            class="inline-flex items-center px-2 py-2 text-sm font-medium border rounded-md"
            @click="handleZoomIn"
            icon="lucide:plus"
          />
        </div> -->
      </div>

      <div class="flex items-center space-x-4">
        <DeviceSelector
          :active-device="activeDevice"
          @update:active-device="activeDevice = $event"
        />

        <div class="flex-1 ml-4">
          <USlider
            v-model="zoomLevel"
            :min="50"
            :max="300"
            :step="1"
            :ui="{
              range:
                'h-2 bg-wild-sand-600 rounded-lg appearance-none cursor-pointer',
              track:
                'h-2 bg-wild-sand-200 rounded-lg appearance-none cursor-pointer',
              thumb:
                'h-4 w-4  rounded-full border-2 ring-wild-sand-600 cursor-pointer',
            }"
            class="cursor-pointer z-50"
          />
        </div>
      </div>
    </div>

    <!-- Contenedor principal de desplazamiento -->
    <div
      ref="scrollContainer"
      class="scroll-container flex-1 overflow-auto p-4 cursor-grab"
      v-dragscroll
    >
      <!-- Contenedor con espacio para el zoom en ambas direcciones -->
      <div
        class="virtual-container"
        :style="{
          width: `${Math.max(2000, getBaseWidth(activeDevice) * 3)}px`,
          height: `${Math.max(1500, getBaseWidth(activeDevice) * 2)}px`,
          padding: '50vh 50vw',
          boxSizing: 'border-box',
        }"
      >
        <!-- Contenedor que mantiene el contenido centrado -->
        <div class="preview-wrapper flex items-center justify-center">
          <div
            class="preview-container transform-gpu"
            :style="{
              transform: `scale(${zoomLevel / 100})`,
              transformOrigin: 'center center',
              width: `${getBaseWidth(activeDevice)}px`,
              transition: 'transform 0.2s ease-out',
            }"
          >
            <!-- Tu contenido -->
            <!--    <NuxtImg src="/logo.png" draggable="false" /> -->
            <!-- o tu DevicePreview descomentar según necesites -->

            <DevicePreview
              :device-type="activeDevice"
              :is-active="true"
              :width="getBaseWidth(activeDevice)"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- 
    <div class="border-t p-4">
      <InfoPanel />
    </div> -->
  </div>
</template>

<style scoped>
.scroll-container {
  scrollbar-width: thin;
  -ms-overflow-style: auto;
  position: relative;
  /* Aseguramos que el scroll sea visible para facilitar la navegación */
}

.virtual-container {
  position: relative;
  min-width: 100%;
  min-height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.preview-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Estilo para barras de desplazamiento más evidentes */
.scroll-container::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.scroll-container::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.3);
  border-radius: 4px;
}

.scroll-container::-webkit-scrollbar-track {
  background-color: rgba(0, 0, 0, 0.1);
}
</style>
